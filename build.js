process.env.NODE_NO_WARNINGS = '1'
const execa = require('execa')
const fs = require('fs').promises
const file = fs.readFile('index.template.html', 'utf8')
const matchURL = /https:\/\/outvoicegithubio-[^.]+\.now\.sh/
const { minify } = require('html-minifier')
const Terser = require('terser')

console.log('hosting on now...')
//Promise.resolve({ stdout: 'htttps://outvoicegithubio-POUETPOUET.now.sh' })
execa('now')
  .then(async ({ stdout: url }) => {
    console.log('hosted at', url)
    console.log('minifing...')
    const minified = minify(await file, {
      caseSensitive: false,
      collapseBooleanAttributes: true,
      collapseInlineTagWhitespace: true,
      collapseWhitespace: true,
      conservativeCollapse: false,
      decodeEntities: true,
      html5: true,
      includeAutoGeneratedTags: true,
      keepClosingSlash: false,
      maxLineLength: false,
      minifyCSS: true,
      minifyJS: js => Terser.minify(js).code,
      minifyURLs: true,
      preserveLineBreaks: false,
      preventAttributesEscaping: true,
      processConditionalComments: true,
      removeAttributeQuotes: true,
      removeComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: true,
      removeOptionalTags: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      removeTagWhitespace: true,
      sortAttributes: true,
      sortClassName: true,
      trimCustomFragments: true,
      useShortDoctype: true,
    })
    const len = console.log(
      `index.html: ${(minified.length / 1000).toFixed(2)}kb (${(
        ((await file).length - minified.length) /
        1000
      ).toFixed(2)}kb saved)`,
    )
    const content = minified.replace(matchURL, url)
    await fs.writeFile('index.html', content, 'utf8')
    console.log('deploy on github pages')
    await execa('git', ['add', 'index.html'])
    await execa('git', ['commit', '-m', 'generate optimised index.html'])
    await execa('git', ['push'])
    console.log('done !')
  })
  .catch(err => {
    console.error(err)
    process.exit(1)
  })
